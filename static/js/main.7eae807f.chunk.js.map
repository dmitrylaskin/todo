{"version":3,"sources":["addTodo/AddTodo.module.css","todo/TodoItem/TodoItem.module.css","todo/TodoList.module.css","context.js","todo/TodoItem/TodoItem.jsx","todo/TodoList.jsx","addTodo/AddTodo.jsx","addTodo/Loader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Context","React","createContext","TodoItem","props","removeTodo","useContext","className","styles","listItem","completed","done","type","onChange","toggleTodos","id","checked","index","text","rm","onClick","TodoList","ObjTodos","todos","map","el","title","key","listStyle","AddTodo","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","createTodo","value","target","add","Loader","ldsRing","App","setTodos","loader","setLoader","useEffect","fetch","then","response","json","data","Provider","filter","concat","Date","now","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iGACAA,EAAOC,QAAU,CAAC,IAAM,qBAAqB,QAAU,yBAAyB,WAAW,4B,gBCA3FD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,KAAO,uBAAuB,GAAK,uB,oCCA3FD,EAAOC,QAAU,CAAC,UAAY,8B,2JCGfC,EAFCC,IAAMC,gBCuBPC,EArBE,SAACC,GAAW,IAElBC,EAAcC,qBAAWN,GAAzBK,WAEP,OACI,wBAAIE,UAAWC,IAAOC,UAClB,0BAAMF,UAAWH,EAAMM,UAAYF,IAAOG,KAAO,MAC7C,2BACIC,KAAK,WACLC,SAAU,WAAOT,EAAMU,YAAYV,EAAMW,KACzCC,QAASZ,EAAMM,YAEnB,gCAASN,EAAMa,MAAQ,GAN3B,OAQKb,EAAMc,MAEX,4BAAQX,UAAWC,IAAOW,GAAIC,QAAS,WAAOf,EAAWD,EAAMW,MAA/D,UCEGM,EAjBE,SAACjB,GAEd,IAAIkB,EAAWlB,EAAMmB,MAAMC,KAAI,SAACC,EAAIR,GAAL,OAAe,kBAAC,EAAD,CAAUC,KAAMO,EAAGC,MACTT,MAAOA,EACPU,IAAKF,EAAGV,GACRA,GAAIU,EAAGV,GACPL,UAAWe,EAAGf,UACdI,YAAaV,EAAMU,iBAI3E,OAAQ,wBAAIP,UAAWC,IAAOoB,WAEzBN,I,gBCMMO,EArBC,SAACzB,GAAW,IAAD,EAEa0B,mBAAS,IAFtB,mBAEhBC,EAFgB,KAEJC,EAFI,KAgBvB,OAAQ,0BAAMC,SAZQ,SAACC,GACnBA,EAAMC,iBAEFJ,EAAWK,SACXhC,EAAMiC,WAAWN,GACjBC,EAAc,OAQlB,2BAAOM,MAAOP,EAAYlB,SAAU,SAAAqB,GAAK,OAAIF,EAAcE,EAAMK,OAAOD,UACxE,4BAAQ/B,UAAWC,IAAOgC,IAAK5B,KAAK,UAApC,cCRO6B,EAVA,WACX,OAAQ,6BACJ,yBAAKlC,UAAWC,IAAOkC,SACnB,8BACA,8BACA,8BACA,iCCmDGC,MApDf,WAAgB,IAAD,EAEeb,mBAAS,IAFxB,mBAEJP,EAFI,KAEGqB,EAFH,OAGiBd,oBAAS,GAH1B,mBAGJe,EAHI,KAGIC,EAHJ,KAmCX,OAdAC,qBAAU,WAENC,MAAM,uDAEDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACFR,EAASQ,GACTN,GAAU,QAGnB,IAKC,kBAAC,EAAQO,SAAT,CAAkBf,MAAO,CAACjC,WArBX,SAACU,GAChB6B,EAASrB,EAAM+B,QAAO,SAAA7B,GAAE,OAAIA,EAAGV,KAAOA,SAqBtC,yBAAKR,UAAU,WACX,wCACA,kBAAC,EAAD,CAAS8B,WArBE,SAACX,GAChBkB,EAASrB,EAAMgC,OAAO,CAAC,CAACxC,GAAIyC,KAAKC,MAAO/C,WAAW,EAAOgB,MAAOA,SAsB5DmB,GAAU,kBAAC,EAAD,MAGVtB,EAAMmC,OACD,kBAAC,EAAD,CAAUnC,MAAOA,EAAOT,YAxClB,SAACC,GAEjB6B,EAASrB,EAAMC,KAAK,SAAAC,GAIhB,OAHIA,EAAGV,KAAOA,IACVU,EAAGf,WAAae,EAAGf,WAEhBe,SAmCAoB,GAAU,0CC1CTc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7eae807f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"add\":\"AddTodo_add__amMWs\",\"ldsRing\":\"AddTodo_ldsRing__14gLU\",\"lds-ring\":\"AddTodo_lds-ring__119_D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItem\":\"TodoItem_listItem__2rx_1\",\"done\":\"TodoItem_done__Lh7iC\",\"rm\":\"TodoItem_rm__2u9He\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listStyle\":\"TodoList_listStyle__2vcik\"};","import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from \"react\";\r\nimport styles from './TodoItem.module.css'\r\nimport Context from \"../../context\";\r\n\r\nconst TodoItem = (props) => {\r\n\r\n    const {removeTodo} = useContext(Context)\r\n\r\n    return (\r\n        <li className={styles.listItem}>\r\n            <span className={props.completed ? styles.done : null}>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    onChange={() => {props.toggleTodos(props.id)}}\r\n                    checked={props.completed}\r\n                />\r\n                <strong>{props.index + 1}</strong>\r\n                &nbsp;\r\n                {props.text}\r\n            </span>\r\n            <button className={styles.rm} onClick={() => {removeTodo(props.id)}}>&times;</button>\r\n        </li>\r\n\r\n    )\r\n}\r\nexport default TodoItem\r\n\r\n","import React from \"react\";\r\nimport styles from './TodoList.module.css'\r\nimport TodoItem from \"./TodoItem/TodoItem\";\r\n\r\n\r\nconst TodoList = (props) => {\r\n\r\n    let ObjTodos = props.todos.map((el, index) => <TodoItem text={el.title}\r\n                                                            index={index}\r\n                                                            key={el.id}\r\n                                                            id={el.id}\r\n                                                            completed={el.completed}\r\n                                                            toggleTodos={props.toggleTodos}\r\n\r\n    />)\r\n\r\n    return (<ul className={styles.listStyle}>\r\n\r\n        {ObjTodos}\r\n\r\n    </ul>)\r\n}\r\nexport default TodoList","import React, {useState} from \"react\";\r\nimport styles from './AddTodo.module.css'\r\n\r\nconst AddTodo = (props) => {\r\n\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault()\r\n\r\n        if (inputValue.trim()) {\r\n            props.createTodo(inputValue)\r\n            setInputValue('')\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    return (<form onSubmit={submitHandler}>\r\n        <input value={inputValue} onChange={event => setInputValue(event.target.value)}/>\r\n        <button className={styles.add} type=\"submit\">Add todo</button>\r\n    </form>)\r\n}\r\nexport default AddTodo","import React from \"react\";\r\nimport styles from './AddTodo.module.css'\r\n\r\nconst Loader = () => {\r\n    return (<div>\r\n        <div className={styles.ldsRing}>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n            <div></div>\r\n        </div>\r\n    </div>)\r\n}\r\nexport default Loader","import React, {useEffect, useState} from 'react';\nimport './index.css';\nimport TodoList from \"./todo/TodoList\";\nimport Context from \"./context\";\nimport AddTodo from \"./addTodo/AddTodo\";\nimport Loader from \"./addTodo/Loader\";\n\n\nfunction App() {\n\n    const [todos, setTodos] = useState([])\n    const [loader, setLoader] = useState(true)\n\n    const toggleTodos = (id) => {\n\n        setTodos(todos.map( el => {\n            if (el.id === id) {\n                el.completed = !el.completed\n            }\n            return el\n        }))\n    }\n\n    const removeTodo = (id) => {\n        setTodos(todos.filter(el => el.id !== id))\n    }\n    const createTodo = (title) => {\n        setTodos(todos.concat([{id: Date.now(), completed: false, title: title}]))\n    }\n    useEffect(() => {\n\n        fetch('https://jsonplaceholder.typicode.com/todos?_limit=5')\n\n            .then(response => response.json())\n            .then(data => {\n                setTodos(data)\n                setLoader(false)\n            })\n\n    }, [])\n\n\n\n    return (\n        <Context.Provider value={{removeTodo:removeTodo}}>\n        <div className=\"wrapper\">\n            <h1>Todo app</h1>\n            <AddTodo createTodo={createTodo}/>\n\n            {loader && <Loader/>}\n\n\n            {todos.length\n                ? <TodoList todos={todos} toggleTodos={toggleTodos} />\n                : (loader || <p>No todos</p>)}\n        </div>\n        </Context.Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}